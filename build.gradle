plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "5.0.0.4638"
}

allprojects {
    version = '1.0.2'
    group = 'org.sonarqube.sample'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    jacoco {
        toolVersion = "0.8.7"
    }

    jacocoTestReport {
        reports {
            xml.required = true
            csv.required = false
            html.required = true
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
    
    sonar {
        properties {
            property 'sonar.projectName', 'Example of SonarScanner for Gradle (multimodule with Jacoco code coverage)'
            property 'sonar.projectKey', 'org.sonarqube.gradle-multi-module-jacoco'
            property "sonar.host.url", "http://localhost:9000"
            property "sonar.token", "sqa_6e4c75395d17eb0d0ec0b84c6387ed26208bc305"
            // Aggregated sonar.java.binaries and sonar.java.libraries properties
            property "sonar.java.binaries", subprojects.collect { "${it.buildDir}/classes/java/main" }.join(',')
            property "sonar.java.libraries", subprojects.collect { subproject ->
                subproject.configurations.compileClasspath.findAll { it.exists() }
            }.flatten().join(',')
            // Unified Jacoco report path
            property "sonar.coverage.jacoco.xmlReportPaths", subprojects.collect { "${it.buildDir}/reports/jacoco/test/jacocoTestReport.xml" }.join(',')
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }
}

dependencies {
    implementation 'ch.qos.logback:logback-classic:1.2.10'
}

// See here for more info: https://docs.gradle.org/6.4-rc-1/samples/sample_jvm_multi_project_with_code_coverage.html
//
// task to gather code coverage from multiple subprojects
// NOTE: the `JacocoReport` tasks do *not* depend on the `test` task by default. Meaning you have to ensure
// that `test` (or other tasks generating code coverage) run before generating the report.
// You can achieve this by calling the `test` lifecycle task manually
// $ ./gradlew test codeCoverageReport
tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                //the jacoco extension may be disabled for some projects
                if (testTask.extensions.getByType(JacocoTaskExtension).isEnabled()) {
                    sourceSets subproject.sourceSets.main
                    executionData(testTask)
                } else {
                    logger.warn('Jacoco extension is disabled for test task \'{}\' in project \'{}\'. this test task will be excluded from jacoco report.',testTask.getName(),subproject.getName())
                }
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        xml.required = true
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
